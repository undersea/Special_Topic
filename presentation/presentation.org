
* URLS                                                             :noexport:
** http://stackoverflow.com/questions/257605/ocaml-match-expression-inside-another-one

** http://caml.inria.fr/pub/docs/manual-ocaml/libref/index.html

** http://www.cs.jhu.edu/~scott/pl/lectures/caml-intro.html

** http://caml.inria.fr/pub/docs/oreilly-book/html/index.html

** http://caml.inria.fr/pub/docs/u3-ocaml/emacs/index.html

** http://caml.inria.fr/pub/docs/u3-ocaml/index.html

** http://pauillac.inria.fr/~ddr/camlp5/

** http://caml.inria.fr/pub/docs/tutorial-camlp4/index.html

** http://www.oreillynet.com/mac/blog/2006/03/haskell_vs_ocamlwhich_do_you_p.html

** http://ocaml.janestreet.com/?q=node/13
   Janes street ocaml Open-source software

* Notes                                                            :noexport:
** Right fold
   1 + (2 + (3 + (4 + 5)))

   ocaml
   ---------------------------------
   List.right_fold (+) [1;2;3;4] 1;;
   - : int = 11
   ---------------------------------

** Left Fold
   (((1 + 2) + 3) + 4) + 5
   
   ocaml
   ---------------------------------
   List.fold_left (+) 1 [1;2;3;4];;
   - : int = 11
   ---------------------------------
** Ocsigen - ocaml web framework??

* Role in SE
  + A functional programming language
    


* Role within SDLC
  
* Similar tools

* Strengths and weaknesses

* Business readiness
  - License
  - Who backs it


* Who uses it

* Demonstration
#+tblname: example-table
| 1 | 2 |
| 2 | 3 |
| 3 | 4 |


#+tblname: example-table2
|  4 |  5 |  6 |
|  7 |  8 |  9 |
| 10 | 11 | 12 |

#+source ocaml-length
#+begin_src ocaml :var table=example-table :var table2=example-table2
    let rec 
    let rec array_to_list array pos = match pos < Array.length array with
        true -> []
      | false -> []
    
#+end_src
  
#+results:
|  3 |  5 |  6 |
|  7 |  8 |  9 |
| 10 | 11 | 12 |


#+source ocaml-to_list
#+begin_src ocaml :var table2=example-table2 :var table=example-table
  let rec to_list tablex n = if n = 0 then [] else
      (to_list tablex (n-1)) @ [(Array.to_list (Array.get tablex (n-1)))];;
  let combined = (to_list table2 (Array.length table2)) @ (to_list table
      (Array.length table));;
  let rec print_list = function 
    | [] -> ()           
    | h::t -> print_row h; print_list t
  and print_row = function 
    | [] -> print_endline ""
    | h::t -> print_int h; print_string "\t"; print_row t;;
  print_list combined;;
#+end_src

#+results:
: 4	5	6	
: 7	8	9	
: 10	11	12	
: 1	2	
: 2	3	
: 3	4	
: - : unit = ()

